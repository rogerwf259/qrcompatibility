[{"C:\\Users\\rogel\\Documents\\react\\qrcompatibility\\src\\QrReader.tsx":"1","C:\\Users\\rogel\\Documents\\react\\qrcompatibility\\src\\App.tsx":"2","C:\\Users\\rogel\\Documents\\react\\qrcompatibility\\src\\Ticket.tsx":"3"},{"size":3329,"mtime":1611852836762,"results":"4","hashOfConfig":"5"},{"size":538,"mtime":1611853379697,"results":"6","hashOfConfig":"5"},{"size":442,"mtime":1611852952366,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"gxfatu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\rogel\\Documents\\react\\qrcompatibility\\src\\QrReader.tsx",["15","16","17","18","19"],"import React, { ReactElement, useEffect, useRef, useState } from \"react\";\r\nimport jsQR, { QRCode } from \"jsqr\";\r\nimport { Point } from \"jsqr/dist/locator\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ninterface Props {}\r\n\r\nexport default function QrReader({}: Props): ReactElement {\r\n  const history = useHistory();\r\n  const [outputData, setOutputData] = useState<string>(\"\");\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  let context: CanvasRenderingContext2D | null | undefined = undefined;\r\n  let video: HTMLVideoElement | null;\r\n  let canvas: HTMLCanvasElement | null;\r\n  let code: QRCode | null;\r\n  let stream: MediaStream | null;\r\n  const drawLine = (begin: Point, end: Point, color: string) => {\r\n    if (context) {\r\n      context.beginPath();\r\n      context.moveTo(begin.x, begin.y);\r\n      context.lineTo(end.x, end.y);\r\n      context.lineWidth = 4;\r\n      context.strokeStyle = color;\r\n      context.stroke();\r\n    }\r\n  };\r\n  const tick = () => {\r\n    if (video?.readyState === video?.HAVE_ENOUGH_DATA && video && canvas) {\r\n      canvas.hidden = false;\r\n      canvas.height = video.videoHeight;\r\n      canvas.width = video.videoWidth;\r\n      context?.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n      let imageData = context?.getImageData(0, 0, canvas.width, canvas.height);\r\n      if (imageData !== undefined)\r\n        code = jsQR(imageData.data, imageData.width, imageData.height, {\r\n          inversionAttempts: \"dontInvert\",\r\n        });\r\n      if (code) {\r\n        drawLine(\r\n          code.location.topLeftCorner,\r\n          code.location.topRightCorner,\r\n          \"#fc2c03\"\r\n        );\r\n        drawLine(\r\n          code.location.topRightCorner,\r\n          code.location.bottomRightCorner,\r\n          \"#fc2c03\"\r\n        );\r\n        drawLine(\r\n          code.location.bottomRightCorner,\r\n          code.location.bottomLeftCorner,\r\n          \"#fc2c03\"\r\n        );\r\n        drawLine(\r\n          code.location.bottomLeftCorner,\r\n          code.location.topLeftCorner,\r\n          \"#fc2c03\"\r\n        );\r\n        setOutputData(code.data);\r\n        setTimeout(() => {\r\n          history.push(\"/ticket\", { info: code });\r\n        }, 3000);\r\n      }\r\n    }\r\n    requestAnimationFrame(tick);\r\n  };\r\n  useEffect(() => {\r\n    const startScan = async () => {\r\n      stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { facingMode: \"environment\" },\r\n      });\r\n      if (stream && video) {\r\n        video.srcObject = stream;\r\n        video.playsInline = true;\r\n        video.play();\r\n        requestAnimationFrame(tick);\r\n      }\r\n    };\r\n    video = videoRef.current;\r\n    canvas = canvasRef.current;\r\n    context = canvas?.getContext(\"2d\");\r\n    startScan();\r\n    return () => {\r\n      stream?.getTracks().forEach((t) => t.stop());\r\n      if (video) video.srcObject = null;\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(outputData);\r\n  }, [outputData]);\r\n  return (\r\n    <div className=\"qr-container\">\r\n      <h1>QR Code Scanner</h1>\r\n      <button>Scan</button>\r\n      <video hidden ref={videoRef} />\r\n      <canvas ref={canvasRef} hidden id=\"canvas\"></canvas>\r\n      <div>\r\n        <h3>Data:</h3>\r\n        <span>{outputData.length > 0 ? outputData : \"No data read yet\"}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\rogel\\Documents\\react\\qrcompatibility\\src\\App.tsx",[],"C:\\Users\\rogel\\Documents\\react\\qrcompatibility\\src\\Ticket.tsx",[],{"ruleId":"20","severity":1,"message":"21","line":8,"column":34,"nodeType":"22","messageId":"23","endLine":8,"endColumn":43},{"ruleId":"24","severity":1,"message":"25","line":70,"column":16,"nodeType":"26","endLine":72,"endColumn":9},{"ruleId":"24","severity":1,"message":"27","line":80,"column":13,"nodeType":"28","endLine":80,"endColumn":29},{"ruleId":"24","severity":1,"message":"29","line":81,"column":14,"nodeType":"28","endLine":81,"endColumn":31},{"ruleId":"24","severity":1,"message":"30","line":82,"column":15,"nodeType":"31","endLine":82,"endColumn":39},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","Assignments to the 'stream' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","Assignments to the 'video' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'context' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ChainExpression"]